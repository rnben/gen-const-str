package main

import (
	"bytes"
	"go/ast"
	"go/format"
	"go/parser"
	"go/token"
	"html/template"
	"io/ioutil"
	"log"
	"os"
	"strings"

	"github.com/pkg/errors"
)

func main() {
	file := os.Getenv("GOFILE")
	if file == "" {
		return
	}

	fset := token.NewFileSet()
	f, err := parser.ParseFile(fset, file, nil, parser.ParseComments)
	if err != nil {
		panic(err)
	}

	cmap := ast.NewCommentMap(fset, f, f.Comments)
	comments := make(map[string]string)

	for node := range cmap {
		if spec, ok := node.(*ast.ValueSpec); ok && len(spec.Names) == 1 {
			ident := spec.Names[0]
			if ident.Obj.Kind == ast.Con {
				comments[ident.Name] = parseComment(ident.Name, spec.Doc)
			}
		}
	}

	src, err := genCode(comments, f.Name.Name)
	if err != nil {
		log.Fatal(err)
	}

	out := strings.TrimSuffix(file, ".go") + "_gen.go"
	err = ioutil.WriteFile(out, src, 0644)
	if err != nil {
		panic(err)
	}
}

func parseComment(name string, group *ast.CommentGroup) string {
	var buf bytes.Buffer

	for _, comment := range group.List {
		text := strings.TrimSpace(strings.ReplaceAll(comment.Text, "//", ""))
		buf.WriteString(text)
	}

	bytes := buf.Bytes()

	for i, b := range bytes {
		switch b {
		case '\t', '\n', '\r':
			bytes[i] = ' '
		case '/':
			bytes[i] = ' '
		}
	}

	return string(bytes)
}

func genCode(comments map[string]string, name string) ([]byte, error) {
	var buf = bytes.NewBufferString("")

	data := map[string]interface{}{
		"pkg":      name,
		"comments": comments,
	}

	t, err := template.New("").Parse(genTpl)
	if err != nil {
		return nil, errors.Wrapf(err, "template init err")
	}

	err = t.Execute(buf, data)
	if err != nil {
		return nil, errors.Wrapf(err, "template data err")
	}

	return format.Source(buf.Bytes())
}

const genTpl = `
// Code generated by https://github.com/rnben/gen-const-str DO NOT EDIT

// {{.pkg}} const code comment msg
package {{.pkg}}

// noErrorMsg if code is not found, GetMsg will return this
const noErrorMsg = "unknown error"

// messages get msg from const comment
var messages = map[int]string{
	{{range $key, $value := .comments}}
	{{$key}}: "{{$value}}",{{end}}
}

// GetMsg get error msg
func GetMsg(code int) string {
	msg, ok := messages[code]
	if !ok {
		return noErrorMsg
	}

	return msg
}
`
